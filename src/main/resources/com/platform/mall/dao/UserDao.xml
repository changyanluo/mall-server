<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platform.mall.dao.UserDao">
    <select id="getRolebyUserId" resultType="com.platform.mall.bean.SysRole">
        select a.id id,
               a.role_name roleName,
               a.create_time createTime,
               a.description description
        from sys_role a inner join sys_user_role b on a.id = b.role_id
        where b.user_id = #{userId} and a.status = 1
    </select>
    <select id="getMenubyUserId" resultType="com.platform.mall.bean.SysMenu">
        select DISTINCT c.id id,
        c.parent_id parentId,
        c.menu_name menuName,
        c.create_time createTime,
        c.icon icon,
        c.description description,
        c.level level,
        c.url url
        from
        sys_role a inner join sys_user_role  b inner join sys_menu c inner join sys_role_menu d
        on a.id = b.role_id and a.id = d.role_id and c.id = d.menu_id
        where b.user_id = #{userId} and a.status = 1 and c.status = 1
    </select>
    <select id="getAuthoritybyUserId" resultType="com.platform.mall.bean.SysActionAuthority">
        SELECT
        DISTINCT c.name name, c.value value
        FROM
        sys_role a
        INNER JOIN
        sys_user_role b
        INNER JOIN
        sys_action_authority c
        INNER JOIN
        sys_role_authority d ON a.id = b.role_id AND a.id = d.role_id
        AND c.id = d.authority_id
        WHERE
        b.user_id = #{userId} AND a.status = 1
        AND c.status = 1
    </select>
    <select id="getMenubyRoleId" resultType="com.platform.mall.bean.SysMenu">
        select a.id id,
               a.parent_id parentId,
               a.menu_name menuName,
               a.create_time createTime,
               a.icon icon,
               a.description description,
               a.level level,
               a.url url
        from sys_menu a inner join sys_role_menu b on a.id = b.menu_id
        where b.role_id = #{roleId} and a.status = 1
    </select>
    <select id="getFlashGoods" resultType="com.platform.mall.dto.FlashOrder"
            parameterType="com.platform.mall.dto.FlashMessage">
        select b.goods_name,a.flash_price
        from mall_flash_sale a
        inner join
        mall_goods b
        on a.goods_id = b.id
        where a.id = #{flashMessage.flashId}
        and a.goods_id = #{flashMessage.goodsId}
    </select>
    <select id="getAuthoritybyRoleId" resultType="com.platform.mall.bean.SysActionAuthority">
        select a.id id,
        a.parent_id parentId,
        a.name name,
        a.create_time createTime,
        a.value value,
        a.description description
        from sys_action_authority a inner join sys_role_authority b on a.id = b.authority_id
        where b.role_id = #{roleId} and a.status = 1
    </select>
    <insert id="batchInsertUserRoleRelation">
        INSERT INTO sys_user_role (user_id, role_id) VALUES
        <foreach collection="list" separator="," item="item" index="index">
            (#{userId,jdbcType=BIGINT},
            #{item,jdbcType=BIGINT})
        </foreach>
    </insert>
    <insert id="batchInsertRoleMenuRelation">
        INSERT INTO sys_role_menu (role_id, menu_id) VALUES
        <foreach collection="list" separator="," item="item" index="index">
        (#{roleId,jdbcType=BIGINT},
        #{item,jdbcType=BIGINT})
        </foreach>
    </insert>
    <insert id="batchInsertRoleAuthorityRelation">
        INSERT INTO sys_role_authority (role_id, authority_id) VALUES
        <foreach collection="list" separator="," item="item" index="index">
            (#{roleId,jdbcType=BIGINT},
            #{item,jdbcType=BIGINT})
        </foreach>
    </insert>
    <update id="updateGoodsStateById">
        UPDATE mall_goods set state = #{state}
        where id = #{goodsId}
    </update>
</mapper>